// Motor control constants and pin definitions
#define SPEED 140

#define speedPinR 9
#define RightMotorDirPin1 22
#define RightMotorDirPin2 24
#define speedPinL 10
#define LeftMotorDirPin1 26
#define LeftMotorDirPin2 28

#define speedPinRB 11
#define RightMotorDirPin1B 5
#define RightMotorDirPin2B 6
#define speedPinLB 12
#define LeftMotorDirPin1B 7
#define LeftMotorDirPin2B 8

// Initialize motor control pins
void init_GPIO() {
  pinMode(RightMotorDirPin1, OUTPUT);
  pinMode(RightMotorDirPin2, OUTPUT);
  pinMode(speedPinR, OUTPUT);
  pinMode(LeftMotorDirPin1, OUTPUT);
  pinMode(LeftMotorDirPin2, OUTPUT);
  pinMode(speedPinL, OUTPUT);

  pinMode(RightMotorDirPin1B, OUTPUT);
  pinMode(RightMotorDirPin2B, OUTPUT);
  pinMode(speedPinRB, OUTPUT);
  pinMode(LeftMotorDirPin1B, OUTPUT);
  pinMode(LeftMotorDirPin2B, OUTPUT);
  pinMode(speedPinLB, OUTPUT);
}

// Motor control functions
void go_advance(int speed) {
  digitalWrite(RightMotorDirPin1, HIGH);
  digitalWrite(RightMotorDirPin2, LOW);
  analogWrite(speedPinR, speed);

  digitalWrite(LeftMotorDirPin1, HIGH);
  digitalWrite(LeftMotorDirPin2, LOW);
  analogWrite(speedPinL, speed);

  digitalWrite(RightMotorDirPin1B, HIGH);
  digitalWrite(RightMotorDirPin2B, LOW);
  analogWrite(speedPinRB, speed);

  digitalWrite(LeftMotorDirPin1B, HIGH);
  digitalWrite(LeftMotorDirPin2B, LOW);
  analogWrite(speedPinLB, speed);
}

// Stop all motors
void stop_Stop() {
  analogWrite(speedPinR, 0);
  analogWrite(speedPinL, 0);
  analogWrite(speedPinRB, 0);
  analogWrite(speedPinLB, 0);
}

void setup() {
  // Initialize GPIO pins for motor control
  init_GPIO();

  // Start serial communication
  Serial.begin(9600);
  Serial.println("Listening for moisture signals...");
}

void loop() {
  // Check for incoming data
  if (Serial.available()) {
    char command = Serial.read();

    if (command == 'F') {
      go_advance(SPEED);  // Move forward
      Serial.println("Moving forward...");
    } else if (command == 'S') {
      stop_Stop();  // Stop movement
      Serial.println("Stopping...");
    }
  }

  // Optional: add a short delay to prevent overly rapid polling
  delay(100);
}
